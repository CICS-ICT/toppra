version: 2.1

commands:
  build_cpp:
    description: "Install dependencies (C++) and build toppra C++ API"
    parameters:
      python-version:
        type: string
        default: "3.6"
      python-version-short:
        type: string
        default: "36"
    steps:
      - run:
          name: Install dependencies
          command: |
            echo "deb [arch=amd64] http://robotpkg.openrobots.org/packages/debian/pub $(lsb_release -sc) robotpkg" \
              | sudo tee /etc/apt/sources.list.d/robotpkg.list
            curl http://robotpkg.openrobots.org/packages/debian/robotpkg.key \
              | sudo apt-key add -
            sudo apt update
            sudo apt install -y cmake clang-tidy libeigen3-dev robotpkg-pinocchio robotpkg-qpoases libglpk-dev \
              robotpkg-py<< parameters.python-version-short >>-pinocchio \
              robotpkg-py<< parameters.python-version-short >>-example-robot-data

            cd ~/ && git clone https://github.com/pybind/pybind11
            cd pybind11 && git checkout v2.5.0
            mkdir build && cd build && cmake -DPYBIND11_TEST=false .. && sudo make install

            cd ~/ && git clone https://github.com/msgpack/msgpack-c.git
            cd msgpack-c && git checkout cpp-3.2.1 && cmake -DMSGPACK_CXX11=ON -DMSGPACK_BUILD_EXAMPLES=OFF -DMSGPACK_CXX_ONLY=ON .
            sudo make install
            
          working_directory: ~/
      - run:
          name: Build toppra C++ API
          command: |
            export LD_LIBRARY_PATH=/opt/openrobots/lib:${LD_LIBRARY_PATH}
            export CMAKE_PREFIX_PATH=/opt/openrobots
            mkdir build && cd build && cmake \
              -DBUILD_WITH_PINOCCHIO=ON \
              -DBUILD_WITH_qpOASES=ON \
              -DBUILD_WITH_GLPK=ON \
              -DPYTHON_BINDINGS=ON \
              -DPYTHON_VERSION=<< parameters.python-version >> \
              -DBUILD_WITH_PINOCCHIO_PYTHON=true \
              -DOPT_MSGPACK=ON ..
            make -j4
          working_directory: ~/repo/cpp

  install_python:
    parameters:
      python-version:
        type: string
        default: "3"
    description: "Install Python dependencies and toppra Python API"
    steps:
      - restore_cache:
          keys:
            - v2-dependencies<< parameters.python-version >>-{{ checksum "requirements<< parameters.python-version >>.txt" }}

      - run:
          name: Install Python dependencies
          command: |
            virtualenv --python python<< parameters.python-version >> venv3 && . venv3/bin/activate
            pip install numpy cython invoke  # absolute minimum to run setup.py
            invoke install-solvers
            pip install -e .[dev]

      - save_cache:
          paths:
            - ./venv3
          key: v2-dependencies<< parameters.python-version >>-{{ checksum "requirements<< parameters.python-version >>.txt" }}

orbs:
  python: circleci/python@0.3.0

jobs:
  # Test the base python installation on multiple environment.
  python:
    parameters:
      python-version:
        type: string
        default: ""
      tox-base:
        type: string
        default: "py"
    docker:
      - image: hungpham2511/toppra-dep:0.0.3

    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Run tests for python << parameters.python-version >>
          command: |
            virtualenv --python python3.7 venv3 && . venv3/bin/activate
            pip install tox numpy cython  # need numpy and cython to create the sdist
            tox -e << parameters.tox-base >><< parameters.python-version >>

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results  

  # Test the cpp api and bindings on python3.7
  cpp-python36:
    docker:
      - image: cimg/python:3.6
    working_directory: ~/repo
    steps:
      - checkout
      - build_cpp
      - run:
          name: Unit tests (C++)
          command: |
            ./tests/all_tests
          working_directory: ~/repo/cpp/build
      - run:
          name: Check codestyle (C++)
          command: |
            clang-tidy  src/**/*.cpp \
            -checks=clang-analyzer-*,clang-analyzer-cplusplus*,cppcoreguidelines-*,performance-*,modernize-*,readability-,-cppcoreguidelines-pro-bounds-array-to-pointer-decay\
            -warnings-as-errors=clang-analyzer-*,clang-analyzer-cplusplus*,cppcoreguidelines-*,modernize-*
          working_directory: ~/repo/cpp
      - python/load-cache:
          dependency-file: requirements3.txt
      - python/install-deps:
          dependency-file: requirements3.txt
      - python/save-cache:
          dependency-file: requirements3.txt
      - run:
          name: Install Python API with bindings
          command: |
            pip install numpy cython invoke  # absolute minimum to run setup.py
            invoke install-solvers
            pip install -e .[dev]

      - run:
          name: Test Python API with bindings
          command: |
            export ROS_PACKAGE_PATH=/opt/openrobots/share
            export PYTHONPATH=/opt/openrobots/lib/python3.6/site-packages:$PYTHONPATH
            pytest tests --durations=3 --junitxml=test-reports/junit.xml

      - store_test_results:
          path: test-reports

  pre-release:
    docker:
      - image: buildpack-deps:trusty
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Pull all known tags and check that the tag in VERSION has not already exist.
          command: |
            VERSION=`cat VERSION`
            git fetch --tags
            git tag $VERSION

  release:
    docker:
      - image: buildpack-deps:trusty
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Tag code with the latest version in VERSION and push tag.
          command: |
            VERSION=`cat VERSION`
            git fetch --tags
            git tag $VERSION
            git push origin $VERSION
      - run:
          name: Publish to PyPI
          command: |
            echo "TODO"

workflows:
  version: 2
  integrate:
    jobs:

      ## temporary disable
      # - python:
      #     tox-base: "lint"
      # - python:
      #     matrix:
      #       parameters:
      #         python-version: ["27", "36", "37"]

      - cpp-python36

  release:
    jobs:
      - pre-release:
          filters:
            branches:
              only:
              - /release-.*/

  publish:
    jobs:
      - release:
          filters:
            branches:
              only:
              - master



